---
title : DRIP Water Resource Allocation Tool
author : Lisa Rennels and Nick Depsky
date : 11th May 2018
---

# Intro

DRIP is a water resource allocation tool, modeled after [WEAP](http://weap21.org)
from the [Stockholm Environment Institute's U.S. Center](https://www.sei.org/centres/us/).
WEAP can be summarized as follows:

*WEAP ("Water Evaluation And Planning" system) is a user-friendly software tool 
that takes an integrated approach to water resources planning.

Freshwater management challenges are increasingly common. Allocation of limited 
water resources between agricultural, municipal and environmental uses now 
requires the full integration of supply, demand, water quality and ecological 
considerations. The Water Evaluation and Planning system, or WEAP, aims to 
incorporate these issues into a practical yet robust tool for integrated water 
resources planning. WEAP is developed by the Stockholm Environment Institute's 
U.S. Center.*

The source code is available on [GitHub](https://github.com/lrennels/ER290A-finalproject) 
and includes several script files as well as input data files to run a small
example.

# User Guide and Example

## Setup

In order to use DRIP, you will first want to include the helper functions as
follows:

```{julia; eval=false}
using Weave
include(helper_functions.jl)
```

## Define Demand

The `DefineDemand.jl` script allows a user to define specific **demand** nodes 
of which can be of several categories including agricultural, municipal, industrial, 
or instream flow requirements (IFRs).  Each demand nodes has several metadata
requirements including

- months - a list of months (*12 by 1 array of strings*)
- node_type - type of node (*string*)
- name - name of the node (*string*)
- size - size of the node (*Float64*)
- rate - monthly rate of flow through node (*12 by 1 array of FLoat64*)  
- size_units - units of size variable (*string*)
- demand_units = units of rate variable (*string*)
- priority - demand priority (*Int*)
- loc - location (or position) in list of all nodes (*Int*)

Once all demand nodes are defined, you can create the structures and 
graphically view the information as follows:

```{julia; eval=true}
include("DefineDemand.jl")
dplot()
```


## Define Supply 

## Define Infrastructure

## Run DRIP

# Comparison to WEAP

# Future Work
