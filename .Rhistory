Z <- data %>% select_(.dots = c(X_exog,IVs)) %>% as.matrix()
if(intercept == TRUE) {
X <- cbind(int,X)
Z <- cbind(int,Z)
}
X_hat <- Z%*%solve(t(Z)%*%Z)%*%t(Z)%*%X
beta_hat <- solve(t(X_hat) %*% X_hat) %*% t(X_hat) %*% y
y_hat <- X_hat %*% beta_hat %>% as.vector()
if(stderr == "correct"){
resid <- y - X%*%beta_hat
} else {
resid <- y - y_hat
}
ssr <- t(resid) %*% resid
s2 <- ssr/(n-k)
stderr
se <- t(sqrt(s2 %*% diag(solve(t(X_hat) %*% X_hat))))
stderr = "correct"
n <- nrow(data) # Calc number of observations n
k <- ncol(X)
df <- n - k
int <- rep(1,n)
# First Stage - Regress endogenous variables on exogenous variables and intercept
y <- data %>% select_(.dots = y_var) %>% as.matrix()
X <- data %>% select_(.dots = c(X_exog,X_endog)) %>% as.matrix()
Z <- data %>% select_(.dots = c(X_exog,IVs)) %>% as.matrix()
if(intercept == TRUE) {
X <- cbind(int,X)
Z <- cbind(int,Z)
}
X_hat <- Z%*%solve(t(Z)%*%Z)%*%t(Z)%*%X
beta_hat <- solve(t(X_hat) %*% X_hat) %*% t(X_hat) %*% y
y_hat <- X_hat %*% beta_hat %>% as.vector()
if(stderr == "correct"){
resid <- y - X%*%beta_hat
} else {
resid <- y - y_hat
}
ssr <- t(resid) %*% resid
s2 <- ssr/(n-k)
se <- t(sqrt(s2 %*% diag(solve(t(X_hat) %*% X_hat))))
#requires y-variable, all original RHS variables, any endogenous X_vars, instrumental variables, and whether or not to report 2SLS std.errors ("wrong") or the "correct" ones.
my_2sls <-  function(data, y_var, X_exog, X_endog, IVs, stderr = "wrong", intercept = T)
{
n <- nrow(data) # Calc number of observations n
k <- ncol(X)
df <- n - k
int <- rep(1,n)
# First Stage - Regress endogenous variables on exogenous variables and intercept
y <- data %>% select_(.dots = y_var) %>% as.matrix()
X <- data %>% select_(.dots = c(X_exog,X_endog)) %>% as.matrix()
Z <- data %>% select_(.dots = c(X_exog,IVs)) %>% as.matrix()
if(intercept == TRUE) {
X <- cbind(int,X)
Z <- cbind(int,Z)
}
X_hat <- Z%*%solve(t(Z)%*%Z)%*%t(Z)%*%X
beta_hat <- solve(t(X_hat) %*% X_hat) %*% t(X_hat) %*% y
y_hat <- X_hat %*% beta_hat %>% as.vector()
if(stderr == "correct"){
resid <- y - X%*%beta_hat
} else {
resid <- y - y_hat
}
ssr <- t(resid) %*% resid
s2 <- ssr/(n-k)
se <- t(sqrt(s2 %*% diag(solve(t(X_hat) %*% X_hat))))
vcov_mat <- as.numeric(s2) * solve(t(X) %*% X)
i <- rep(1,n)
A <- diag(n) - (1/n)*(i %*% t(i))
y_star <- A %*% y
sst <- t(y_star) %*% y_star
ssm <- sst - ssr
r2uc <- 1 - ssr/(t(y) %*% y)
r2 <- 1 - (ssr/sst)
r <- sqrt(r2)
adjr2 <- 1 - ((n-1)/(n-k)*(1-r2))
row.names(se) <- row.names(beta_hat)
conf95 <- cbind((beta_hat - 2*se),(beta_hat + 2*se)) %>% as.data.frame() %>% set_colnames(c("+2SE","-2SE"))
# Calculate t-statistic against the null hypothesis of b estimator being 0.
tstat <- (beta_hat - 0)/se
# Calculate the p-values
pvals = pt(q = abs(tstat), df = df, lower.tail = F)*2
return(list(y_pred = y_hat, resids = resid, beta_hat = beta_hat, r2uc = r2uc, r2 = r2, r = r, adjr2 = adjr2, se = se, n = n, k = k,df = df, t_stats = tstat, p_vals = pvals, ssr = ssr, ssm = ssm, s2 = s2, vcov = vcov_mat, confint95 = conf95))
}
mod2e <- my_2sls(card, y_var = "lwage", X_exog = c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66"), X_endog = "educ", IVs = c("nearc2", "nearc4"), stderr = "wrong")
kable(stat_tab(mod2e), caption = "Model estimates from 2-stage least squares estimation, with incorrect standard errors")
mod2e1 <- my_2sls(card, y_var = "lwage", X_exog = c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66"), X_endog = "educ", IVs = c("nearc2", "nearc4"), stderr = "correct")
kable(stat_tab(mod2e1), caption = "Model estimates from 2-stage least squares estimation, with incorrect standard errors")
mod2f1 <- my_ols(card, "educ", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66", "nearc2", "nearc4"))
eta <- mod2f1$resids
mod2f1 <- my_ols(card, "educ", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66", "nearc2", "nearc4"))
etahat <- mod2f1$resids
mod2f1 <- my_ols(card, "educ", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66", "nearc2", "nearc4"))
etahat <- mod2f1$resids
head(eta)
mod2f1 <- my_ols(card, "educ", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66", "nearc2", "nearc4"))
etahat <- mod2f1$resids
head(etahat)
card$etahat <- etahat
mod2f2 -> my_ols(card, "educ", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66", "nearc2", "nearc4","etahat"))
card$etahat <- etahat
mod2f2 <- my_ols(card, "educ", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66", "nearc2", "nearc4","etahat"))
card$etahat <- etahat
mod2f2 <- my_ols(card, "educ", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66", "nearc2", "nearc4","etahat"))
kable(stat_tab(mod2f2))
card$etahat <- etahat
mod2f2 <- my_ols(card, "lwage", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66", "nearc2", "nearc4","etahat"))
kable(stat_tab(mod2f2))
View(card)
card$etahat <- etahat
mod2f2 <- my_ols(card, "lwage", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66","etahat"))
kable(stat_tab(mod2f2))
card$etahat <- etahat
mod2f2 <- my_ols(card, "lwage", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66","educ", "etahat"))
kable(stat_tab(mod2f2))
Critical t-value (95%)
#Critical t-value (95%)
abs(qt(0.05,16))
#Critical t-value (95%)
abs(qt(0.05,17))
#Critical t-value (95%)
abs(qt(0.1,17))
#Critical t-value (95%)
abs(qt(0.025,17))
#Critical t-value (95%)
abs(qt(0.025,16))
?qt
#Critical t-value (95%)
abs(qt(0.025,nrow(card) - 17))
#Critical t-value (95%)
abs(qt(0.05,nrow(card) - 17))
#Critical t-value (95%)
df <- row(card) - (ncol(card) + 1)
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
df
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
abs(qt(0.05,df))
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
abs(qt(0.05,df), lower.tail = FALSE)
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
abs(qt(0.05,df, lower.tail = FALSE)
# Setup
rm(list = ls())
options(stringsAsFactors = F)
library(pacman)
p_load(dplyr, ggplot2, ggthemes, viridis, MASS, parallel, magrittr, knitr, reshape, lubridate)
knitr::opts_chunk$set(
echo = T,
warning = FALSE,
message=FALSE,
cache=F,
fig.align= 'center',
tidy.opts=list(width.cutoff=73),tidy=TRUE
)
setwd("/Users/nicholasdepsky/Dropbox/Berkeley_tings/Spring 2018/ARE 212/PS 5")
# ggplot2 theme - Ed's ggplot theme
theme_plot <- theme(
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_rect(fill = NA, color = "grey75"),
axis.ticks = element_line(color = "grey85"),
panel.grid.major = element_line(color = "grey95", size = 0.2),
panel.grid.minor = element_line(color = "grey95", size = 0.2),
legend.key = element_blank())
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
card <- read.csv("card.csv", check.names = F)
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
abs(qt(0.05,df, lower.tail = FALSE))
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
abs(qt(0.025,df, lower.tail = FALSE))
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
qt(0.025,df, lower.tail = FALSE)
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
qt(0.025,df, lower.tail = TRUE)
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
abs(qt(0.025,df))
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
abs(qt(0.025,df, lower.tail = TRUE))
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
abs(qt(0.025,df, lower.tail = FALSE))
#Critical t-value (95%)
df <- nrow(card) - (ncol(card) + 1)
abs(qt(0.025,df))
# Setup
rm(list = ls())
options(stringsAsFactors = F)
library(pacman)
p_load(dplyr, ggplot2, ggthemes, viridis, MASS, parallel, magrittr, knitr, reshape, lubridate)
knitr::opts_chunk$set(
echo = T,
warning = FALSE,
message=FALSE,
cache=F,
fig.align= 'center',
tidy.opts=list(width.cutoff=73),tidy=TRUE
)
setwd("/Users/nicholasdepsky/Dropbox/Berkeley_tings/Spring 2018/ARE 212/PS 5")
# ggplot2 theme - Ed's ggplot theme
theme_plot <- theme(
legend.position = "bottom",
panel.background = element_rect(fill = NA),
panel.border = element_rect(fill = NA, color = "grey75"),
axis.ticks = element_line(color = "grey85"),
panel.grid.major = element_line(color = "grey95", size = 0.2),
panel.grid.minor = element_line(color = "grey95", size = 0.2),
legend.key = element_blank())
#Import Data
df <- read.csv("nls80.csv", check.names = F)
# Define OLS Function
my_ols <- function(data, y_var, X_vars, intercept = TRUE)
{
y <- data %>% select_(.dots = y_var) %>% as.matrix()
n <- nrow(y) # Calc number of observations n
X <- data %>% select_(.dots = X_vars) %>% as.matrix()
if(intercept == TRUE) {
X <- cbind(1,X)
colnames(X) <- c("intercept", X_vars)
}
X <- as.matrix(X)
beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y
y_hat <- X %*% beta_hat %>% as.vector()
k <- ncol(X)
df <- n - k
i <- rep(1,n)
A <- diag(n) - (1/n)*(i %*% t(i))
resid <- y - y_hat
y_star <- A %*% y
sst <- t(y_star) %*% y_star
ssr <- t(resid) %*% resid
ssm <- sst - ssr
r2uc <- 1 - ssr/(t(y) %*% y)
r2 <- 1 - (ssr/sst)
r <- sqrt(r2)
adjr2 <- 1 - ((n-1)/(n-k)*(1-r2))
s2 <- ssr/(n-k)
se <- t(sqrt(s2 %*% diag(solve(t(X) %*% X))))
row.names(se) <- row.names(beta_hat)
vcov_mat <- as.numeric(s2) * solve(t(X) %*% X)
conf95 <- cbind((beta_hat - 2*se),(beta_hat + 2*se)) %>% as.data.frame() %>% set_colnames(c("+2SE","-2SE"))
# Calculate t-statistic against the null hypothesis of b estimator being 0.
tstat <- (beta_hat - 0)/se
# Calculate the p-values
pvals = pt(q = abs(tstat), df = df, lower.tail = F)*2
return(list(y_pred = y_hat, resids = resid, beta_hat = beta_hat, r2uc = r2uc, r2 = r2, r = r, adjr2 = adjr2, se = se, n = n, k = k,df = df, t_stats = tstat, p_vals = pvals, ssr = ssr, ssm = ssm, s2 = s2, vcov = vcov_mat, confint95 = conf95))
}
# Create summary stats table generator function
stat_tab <- function(regr, digits = 4)
{
tab <- round(cbind(regr$beta_hat, regr$se, regr$t_stats, regr$p_vals),digits) %>% as.data.frame()
names(tab) <- c("Coefficient", "Std. Error", "t-statistic", "p-value")
tab$R2 <- c(round(regr$r2,digits),rep("",nrow(regr$beta_hat)-1))
return(tab)
}
bias_tab <- data.frame(matrix(NA,2,2)) %>% set_colnames(c("Gamma < 0", "Gamma > 0")) %>% set_rownames(c("Cov[abil,educ] < 0","Cov[abil,educ] > 0"))
bias_tab$`Gamma < 0` <- c("Bias > 0", "Bias < 0")
bias_tab$`Gamma > 0` <- c("Bias < 0", "Bias > 0")
kable(bias_tab, caption = "Estimator Bias Table")
mod1 <- my_ols(df, "lwage", c("exper", "tenure", "married", "south", "urban", "black", "educ"))
kable(stat_tab(mod1), caption = "Model estimates for the above model, excluding ability")
mod2 <- my_ols(df, "lwage", c("exper", "tenure", "married", "south", "urban", "black", "educ","iq"))
kable(stat_tab(mod2), caption = "Model estimates for the above model, excluding ability")
card <- read.csv("card.csv", check.names = F)
#Plot Series
par(mfrow = c(3,4), mar = c(3,4,2,2))
for(c in 3:(ncol(card)-1)){
plot(card$id, card[,c], xlab = '', ylab = '',main = names(card)[c])
}
mod2 <- my_ols(card, "lwage", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66","educ"))
kable(stat_tab(mod2), caption = "Model Estimates using the Card data")
mod2c <- my_ols(card, "educ", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66", "nearc4"))
kable(stat_tab(mod2c), caption = "Model Estimates using the Card data")
#requires y-variable, all original RHS variables, any endogenous X_vars, and instrumental variables
my_iv <-  function(data, y_var, X_exog, X_endog, IV, intercept = T)
{
n <- nrow(data) # Calc number of observations n
y <- data %>% select_(.dots = y_var) %>% as.matrix()
X <- data %>% select_(.dots = c(X_exog,X_endog)) %>% as.matrix()
Z <- data %>% select_(.dots = c(X_exog,IV)) %>% as.matrix()
if(intercept == TRUE) {
int <- rep(1,n)
X <- cbind(int,X)
Z <- cbind(int,Z)
}
beta_hat <- solve(t(Z) %*% X) %*% t(Z) %*% y
y_hat <- X %*% beta_hat %>% as.vector()
k <- ncol(X)
df <- n - k
i <- rep(1,n)
A <- diag(n) - (1/n)*(i %*% t(i))
resid <- y - y_hat
y_star <- A %*% y
sst <- t(y_star) %*% y_star
ssr <- t(resid) %*% resid
ssm <- sst - ssr
r2uc <- 1 - ssr/(t(y) %*% y)
r2 <- 1 - (ssr/sst)
r <- sqrt(r2)
adjr2 <- 1 - ((n-1)/(n-k)*(1-r2))
s2 <- ssr/(n-k)
se <- t(sqrt(s2 %*% diag(solve(t(X) %*% X))))
row.names(se) <- row.names(beta_hat)
vcov_mat <- as.numeric(s2) * solve(t(X) %*% X)
conf95 <- cbind((beta_hat - 2*se),(beta_hat + 2*se)) %>% as.data.frame() %>% set_colnames(c("+2SE","-2SE"))
# Calculate t-statistic against the null hypothesis of b estimator being 0.
tstat <- (beta_hat - 0)/se
# Calculate the p-values
pvals = pt(q = abs(tstat), df = df, lower.tail = F)*2
return(list(y_pred = y_hat, resids = resid, beta_hat = beta_hat, r2uc = r2uc, r2 = r2, r = r, adjr2 = adjr2, se = se, n = n, k = k,df = df, t_stats = tstat, p_vals = pvals, ssr = ssr, ssm = ssm, s2 = s2, vcov = vcov_mat, confint95 = conf95))
}
mod2d <- my_iv(card, y_var = "lwage", X_exog = c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66"), X_endog = "educ", IV = "nearc4")
kable(stat_tab(mod2d))
kable(round(mod2d$confint95,4), caption = "95th percentiles for IV-estimated Model")
kable(round(mod2$confint95,4), caption = "95th percentiles for OLS Model")
# Reduced Form regression of education on X's, using  "nearc2"
mod2e_p1 <- my_ols(card, "educ", c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66", "nearc2", "nearc4"))
kable(stat_tab(mod2e_p1), caption = "Model Estimates using the Card data")
#requires y-variable, all original RHS variables, any endogenous X_vars, instrumental variables, and whether or not to report 2SLS std.errors ("wrong") or the "correct" ones.
my_2sls <-  function(data, y_var, X_exog, X_endog, IVs, stderr = "wrong", intercept = T)
{
n <- nrow(data) # Calc number of observations n
k <- ncol(X)
df <- n - k
int <- rep(1,n)
# First Stage - Regress endogenous variables on exogenous variables and intercept
y <- data %>% select_(.dots = y_var) %>% as.matrix()
X <- data %>% select_(.dots = c(X_exog,X_endog)) %>% as.matrix()
Z <- data %>% select_(.dots = c(X_exog,IVs)) %>% as.matrix()
if(intercept == TRUE) {
X <- cbind(int,X)
Z <- cbind(int,Z)
}
X_hat <- Z%*%solve(t(Z)%*%Z)%*%t(Z)%*%X
beta_hat <- solve(t(X_hat) %*% X_hat) %*% t(X_hat) %*% y
y_hat <- X_hat %*% beta_hat %>% as.vector()
if(stderr == "correct"){
resid <- y - X%*%beta_hat
} else {
resid <- y - y_hat
}
ssr <- t(resid) %*% resid
s2 <- ssr/(n-k)
se <- t(sqrt(s2 %*% diag(solve(t(X_hat) %*% X_hat))))
vcov_mat <- as.numeric(s2) * solve(t(X_hat) %*% X_hat)
i <- rep(1,n)
A <- diag(n) - (1/n)*(i %*% t(i))
y_star <- A %*% y
sst <- t(y_star) %*% y_star
ssm <- sst - ssr
r2uc <- 1 - ssr/(t(y) %*% y)
r2 <- 1 - (ssr/sst)
r <- sqrt(r2)
adjr2 <- 1 - ((n-1)/(n-k)*(1-r2))
row.names(se) <- row.names(beta_hat)
conf95 <- cbind((beta_hat - 2*se),(beta_hat + 2*se)) %>% as.data.frame() %>% set_colnames(c("+2SE","-2SE"))
# Calculate t-statistic against the null hypothesis of b estimator being 0.
tstat <- (beta_hat - 0)/se
# Calculate the p-values
pvals = pt(q = abs(tstat), df = df, lower.tail = F)*2
return(list(y_pred = y_hat, resids = resid, beta_hat = beta_hat, r2uc = r2uc, r2 = r2, r = r, adjr2 = adjr2, se = se, n = n, k = k,df = df, t_stats = tstat, p_vals = pvals, ssr = ssr, ssm = ssm, s2 = s2, vcov = vcov_mat, confint95 = conf95))
}
mod2e <- my_2sls(card, y_var = "lwage", X_exog = c("exper", "expersq", "black", "south", "smsa", "reg661", "reg662", "reg663", "reg664", "reg665", "reg666", "reg667", "reg668", "smsa66"), X_endog = "educ", IVs = c("nearc2", "nearc4"), stderr = "wrong")
library(ggplot2)
library(ggplot2)
ggplot() + geom_point(aes(x = 1:10, y = runif(10)))
setwd("/Users/nicholasdepsky/Dropbox/Berkeley_tings/Spring 2018/ER 290A/ER290A-finalproject")
df <- read.csv("NYuba_GoodYears_CFS_raw.csv", check.names = F)
date_fix <- function(x, year=1950){
d <- mdy(x)
m <- year(d) %% 100
year(d) <- ifelse(m > year %% 100, 1900+m, 2000+m)
as.Date(d)
}
df$Day <- date_fix(df$Day)
setwd("/Users/nicholasdepsky/Dropbox/Berkeley_tings/Spring 2018/ER 290A/ER290A-finalproject")
df <- read.csv("NYuba_GoodYears_CFS_raw.csv", check.names = F)
library(lubridate)
date_fix <- function(x, year=1950){
d <- mdy(x)
m <- year(d) %% 100
year(d) <- ifelse(m > year %% 100, 1900+m, 2000+m)
as.Date(d)
}
df$Day <- date_fix(df$Day)
day_df <- aggregate(CFS ~ Day, df, mean)
month_df <- day_df %>% mutate(ymd = paste(month(Day),"01",year(Day),sep = "/"))
setwd("/Users/nicholasdepsky/Dropbox/Berkeley_tings/Spring 2018/ER 290A/ER290A-finalproject")
df <- read.csv("NYuba_GoodYears_CFS_raw.csv", check.names = F)
library(lubridate, dplyr)
date_fix <- function(x, year=1950){
d <- mdy(x)
m <- year(d) %% 100
year(d) <- ifelse(m > year %% 100, 1900+m, 2000+m)
as.Date(d)
}
df$Day <- date_fix(df$Day)
day_df <- aggregate(CFS ~ Day, df, mean)
month_df <- day_df %>% mutate(ymd = paste(month(Day),"01",year(Day),sep = "/"))
setwd("/Users/nicholasdepsky/Dropbox/Berkeley_tings/Spring 2018/ER 290A/ER290A-finalproject")
df <- read.csv("NYuba_GoodYears_CFS_raw.csv", check.names = F)
library(lubridate, dplyr, magrittr)
date_fix <- function(x, year=1950){
d <- mdy(x)
m <- year(d) %% 100
year(d) <- ifelse(m > year %% 100, 1900+m, 2000+m)
as.Date(d)
}
df$Day <- date_fix(df$Day)
day_df <- aggregate(CFS ~ Day, df, mean)
month_df <- day_df %>% mutate(ymd = paste(month(Day),"01",year(Day),sep = "/"))
day_df %>% as.matrix()
setwd("/Users/nicholasdepsky/Dropbox/Berkeley_tings/Spring 2018/ER 290A/ER290A-finalproject")
df <- read.csv("NYuba_GoodYears_CFS_raw.csv", check.names = F)
library(lubridate)
library(dplyr)
date_fix <- function(x, year=1950){
d <- mdy(x)
m <- year(d) %% 100
year(d) <- ifelse(m > year %% 100, 1900+m, 2000+m)
as.Date(d)
}
df$Day <- date_fix(df$Day)
day_df <- aggregate(CFS ~ Day, df, mean)
month_df <- day_df %>% mutate(ymd = paste(month(Day),"01",year(Day),sep = "/"))
month_df$ymd <- date_fix(month_df$ymd)
month_df <- aggregate(CFS ~ ymd, month_df, mean)
ggplot(day_df, aes(x = Day, y = CFS)) + geom_line() + ggtitle("Daily Average Streamflow [CFS]") + labs(x = "Date")
setwd("/Users/nicholasdepsky/Dropbox/Berkeley_tings/Spring 2018/ER 290A/ER290A-finalproject")
df <- read.csv("NYuba_GoodYears_CFS_raw.csv", check.names = F)
library(lubridate)
library(dplyr)
library(ggplot2)
date_fix <- function(x, year=1950){
d <- mdy(x)
m <- year(d) %% 100
year(d) <- ifelse(m > year %% 100, 1900+m, 2000+m)
as.Date(d)
}
df$Day <- date_fix(df$Day)
day_df <- aggregate(CFS ~ Day, df, mean)
month_df <- day_df %>% mutate(ymd = paste(month(Day),"01",year(Day),sep = "/"))
month_df$ymd <- date_fix(month_df$ymd)
month_df <- aggregate(CFS ~ ymd, month_df, mean)
ggplot(day_df, aes(x = Day, y = CFS)) + geom_line() + ggtitle("Daily Average Streamflow [CFS]") + labs(x = "Date")
ggplot(month_df, aes(x = ymd, y = CFS)) + geom_line() + ggtitle("Monthly Average Streamflow [CFS]") + labs(x = "Date")
save(day_df, file = "NYuba_Inflow_Day.csv")
save(day_df, file = "NYuba_Inflow_Month.csv")
save(day_df, file = "NYuba_Inflow_Month.csv")
View(month_df)
setwd("/Users/nicholasdepsky/Dropbox/Berkeley_tings/Spring 2018/ER 290A/ER290A-finalproject")
df <- read.csv("NYuba_GoodYears_CFS_raw.csv", check.names = F)
library(lubridate)
library(dplyr)
library(ggplot2)
library(magrittr)
date_fix <- function(x, year=1950){
d <- mdy(x)
m <- year(d) %% 100
year(d) <- ifelse(m > year %% 100, 1900+m, 2000+m)
as.Date(d)
}
df$Day <- date_fix(df$Day)
day_df <- aggregate(CFS ~ Day, df, mean) %>% set_colnames(c("Date", "CFS"))
month_df <- day_df %>% mutate(ymd = paste(month(Date),"01",year(Date),sep = "/"))
month_df$ymd <- date_fix(month_df$ymd)
month_df <- aggregate(CFS ~ ymd, month_df, mean) %>% set_colnames(c("Date", "CFS"))
View(day_df)
save(day_df, file = "NYuba_Inflow_Day.csv")
save(month_df, file = "NYuba_Inflow_Month.csv")
write.csv(day_df, file = "NYuba_Inflow_Day.csv", row.names = NA)
write.csv(day_df, file = "NYuba_Inflow_Day.csv", row.names = F)
write.csv(month_df, file = "NYuba_Inflow_Month.csv", row.names = F)
month_df2 <- month_df2
month_df2 <- month_df
month_df2$CFS <- month_df2$CFS*1.3
write.csv(month_df2, file = "NYuba_Inflow_Month2.csv", row.names = F)
---
title: "R Notebook"
output: html_notebook
---
```{r}
setwd("/Users/nicholasdepsky/Dropbox/Berkeley_tings/Spring 2018/ER 290A/ER290A-finalproject")
df <- read.csv("NYuba_GoodYears_CFS_raw.csv", check.names = F)
library(lubridate)
library(dplyr)
library(ggplot2)
library(magrittr)
date_fix <- function(x, year=1950){
d <- mdy(x)
m <- year(d) %% 100
year(d) <- ifelse(m > year %% 100, 1900+m, 2000+m)
as.Date(d)
}
df$Day <- date_fix(df$Day)
day_df <- aggregate(CFS ~ Day, df, mean) %>% set_colnames(c("Date", "CFS"))
month_df <- day_df %>% mutate(ymd = paste(month(Date),"01",year(Date),sep = "/"))
month_df$ymd <- date_fix(month_df$ymd)
month_df <- aggregate(CFS ~ ymd, month_df, mean) %>% set_colnames(c("Date", "CFS"))
month_df$CFS <- month_df$CFS*0.8
write.csv(month_df, file = "NYuba_Inflow_Month3.csv", row.names = F)
